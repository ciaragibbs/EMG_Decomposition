import glob, os
from os import path
import xml.etree.ElementTree as ET
import tarfile as tf
import numpy as np

with tf.open('test_file.otb+','r') as emg_tar: # later change so all otb+ file names are extracted with glob.glob
    # make a temporary directory to store the data of the otb file if it doesn't exist yet
    if not path.isdir('temp_tarholder'):
        os.mkdir('temp_tarholder')

    # extract all the tar/otb+ files and store in temp_tarholder
    emg_tar.extractall('./temp_tarholder')
    os.getcwd()
    os.chdir('./temp_tarholder')
    trial_label_sig = glob.glob('./*.sig')[0] # only one .sig so can be used to get the trial name (0 index list->string)
    trial_label_xml = trial_label_sig.split('/')[1].split('.')[0] + '.xml'

# read the contents of the trial xml file
with open(trial_label_xml,encoding='utf-8') as file:
    xml=ET.fromstring(file.read())

# get sampling frequency, no. bits of AD converter, no. channels, grid names and muscle names
fsamp = int(xml.find('.').attrib['SampleFrequency'])
nADbit = int(xml.find('.').attrib['ad_bits'])
nchans = int(xml.find('.').attrib['DeviceTotalChannels'])
grid_names = [child[0].attrib['ID'] for child in xml.find('./Channels')]  # the channel description is a nested 'child' of the adapter description
muscle_names = [child[0].attrib['Muscle'] for child in xml.find('./Channels')]
ngrids =int(np.floor(nchans/64))

# read in the EMG trial data
emg_data = np.fromfile(open(trial_label_sig),dtype='int'+ str(nADbit)) 
emg_data = np.transpose(emg_data.reshape(int(len(emg_data)/nchans),nchans)) #Â need to reshape because it is read as a stream
emg_data = emg_data.astype(float) # needed otherwise you just get an integer from the bits to microvolt division

# convert the data from bits to microvolts
for i in range(nchans):
    emg_data[i,:] = ((emg_data[i,:]*5000)/(2**float(nADbit)))

# create a dictionary containing all relevant signal parameters and data
signal = dict(data = emg_data, fsamp = fsamp, nchans = nchans, ngrids = ngrids,grids = grid_names[:ngrids],muscles = muscle_names[:ngrids]) # discard the other muscle and grid entries, not relevant

# if the signals were recorded with a feedback generated by OTBiolab+, get the target and the path performed by the participant
ref_exist = 1 
if ref_exist == 1:

    # only opening the last two .sip files because the first is not needed for analysis
    # would only need MSE between the participant path (file 2) and the target path (file 3)

    ######## path #########
    discard, target_label, path_label = glob.glob('./*.sip')
    with open(path_label.split('/')[1]) as file:
        path = np.fromfile(file,dtype='float64')
        path = path[:np.shape(emg_data)[1]]
    ######## target ########
    with open(target_label.split('/')[1]) as file:
        target = np.fromfile(file,dtype='float64')
        target = target[:np.shape(emg_data)[1]]
    
    signal['path'] = path
    signal['target'] = target
   
# delete the temp_tarholder directory since everything we need has been taken out of it
for file_name in os.listdir('.'):
    # construct full file path
    fpath = os.getcwd()
    file = fpath + '/' + file_name
    if os.path.isfile(file):
        os.remove(file)

os.rmdir(os.getcwd())
   
################################################################  

test = np.array([1,2,3,4])

print(np.where(test[1:]<3))

    